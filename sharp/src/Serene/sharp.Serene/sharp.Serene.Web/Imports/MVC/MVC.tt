<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<# 
	// don't generate a subclass for views starting with these paths
	// make sure you don't have any clashing names in these folders
	string[] stripViewPaths = new string[] { 
		"Modules/", 
		"Views/" 
	}; 

	var webDir = Host.ResolvePath(@"..\..\");
	// search these paths for views
	string[] searchViewPaths = new string[] {
		webDir + @"Modules\",
		webDir + @"Views\"
	};

	IEnumerable<string> files = new List<string>();
	foreach (var path in searchViewPaths)
		files = files.Concat(Directory.GetFiles(path, "*.cshtml", SearchOption.AllDirectories));

	Func<string, string> getName = s => {
		var path = s.Substring(webDir.Length);
		var name = Path.ChangeExtension(path, null).Replace(@"\", "/");
		foreach (var strip in stripViewPaths) {
			if (name.StartsWith(strip, StringComparison.OrdinalIgnoreCase)) {
				name = name.Substring(strip.Length);
			}
		}

		return name;
	};
		
	files = files.OrderBy(x => getName(x));
		
#>
using System;

namespace MVC
{
    public static class Views
    {
<# 
	var last = new string[0];
	var processed = new HashSet<string>();

	foreach (var file in files) 
	{
		var path = file.Substring(webDir.Length);
		var name = getName(file);
		if (name.StartsWith("App_Code/", StringComparison.OrdinalIgnoreCase) ||
			name.EndsWith("_ViewStart", StringComparison.OrdinalIgnoreCase) ||
			processed.Contains(name))
			continue;
		processed.Add(name);
		var parts = name.Split(new char[] { '/' });

		if (parts.Length <= 1)
			continue;

		for (var i = last.Length; i > parts.Length; i--) {
			var close = (new String(' ', (i * 4)) + "}\r\n");
#><#=close#><#
		}

		var x = Math.Min(last.Length, parts.Length) - 2;
		while (x >= 0 && last[x] != parts[x]) 
		{
			var close = (new String(' ', ((x + 2) * 4)) + "}\r\n\r\n");
			x--;
#><#=close#><#
		}


		for (var i = Math.Max(x + 1, 0); i < parts.Length - 1; i++) 
		{
			var indent = new String(' ', (i + 2) * 4);
			var u = parts[i];
			if (i > 0 && parts[i - 1] == u)
				u = u + "_";
			var c = indent + ("public static class " + u + "\r\n" + indent + "{");
#>
<#= c #>
<#
		}
		var n = parts[parts.Length - 1].Replace(".", "_");
		if (parts.Length - 1 > 0 && parts[parts.Length - 2] == n)
			n += "_";
		var s = new String(' ', (parts.Length + 1) * 4) + ("public const string " + n + " = \"~/" + path.Replace(@"\", "/") + "\";");
#>
<#=s#>
<#
		last = parts;
	}

		for (var i = last.Length - 1; i > 0; i--) {
			var close = (new String(' ', ((i + 1) * 4)) + "}\r\n");
#><#=close#><#
		}
#>
    }
}

